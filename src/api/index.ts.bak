import type { Context, Handler, MiddlewareHandler, Input, Env, Schema } from 'hono'
import type { CreateHandlersInterface } from 'hono/factory'
import { Hono } from 'hono'
import { csrf } from 'hono/csrf';
import { createFactory, Factory } from 'hono/factory'
import fse from 'fs-extra'
import path, { extname } from 'path';
import type { BlankSchema } from 'hono/types';
import type { Return } from '@prisma/client/runtime/library';


interface AppControllers {
    [key: string]: Handler
}

enum UID_SYMBOL {
    api = 'api::',
    admin = 'admin::',
    'content-api' = 'api::',
}
type RouterType = 'admin' | 'content-api';
interface Router {
    type?: RouterType
    prefix?: string
    routes: Route[]
}
interface Route {
    method: 'GET'|'POST'|'PUT'|'DELETE'|'PATCH'|'OPTIONS'
    path: string
    handler?: Handler | string
    middlewares?: MiddlewareHandler[]
}
interface HonoApi extends Hono {
    app: Hono
}


async function importApiModule() {
    const modulesLoading:Promise<any>[] = [];
    const lazyLoad:(() => Promise<any>)[] = [];
    const folderPath = path.resolve(process.cwd(), 'src', 'api')
    const modulesPath = (await fse.readdir(folderPath, { withFileTypes: true })).reduce<string[]>((res, f) => {
        f.isDirectory() && res.push(f.name)
        return res
    }, [])
    modulesPath.forEach(m => {
        modulesLoading.push(
            import('file://' + path.resolve(folderPath, m, 'controller.ts')),
        )
        lazyLoad.push(() => import('file://' + path.resolve(folderPath, m, 'routes.ts')))
    })
    await Promise.all(modulesLoading)
    await Promise.all(lazyLoad.map(m => m()))
}
interface ApiModuleOptions<E extends Env = any, P extends string = any, I extends Input = {}> {
    middlewares?: MiddlewareHandler<E, P, I>[],
    bootstrap?(app:ApiModule['api']): void
}
class ApiModule <E extends Env = any, S extends Schema = BlankSchema, BasePath extends string = '/api'> {
    api:Hono<E, S, BasePath>
    static appControllers:AppControllers = {}
    static appRouters: Router[] = []
    static factory:Factory
    constructor(private readonly prefix:string='/api',private readonly options:ApiModuleOptions={}) {
        this.api = new Hono<E, S, BasePath>().basePath(prefix)
        ApiModule.factory = createFactory<E>()
    }
    async useModule() {
        const { api, options } = this
        const { createMiddleware } = ApiModule.factory
        await importApiModule()
        options.middlewares?.forEach(m => api.use(m))
        ApiModule.appRouters.forEach(({ prefix, routes }) => {
            const apiRouter = new Hono<E, S, BasePath>()
            // 加载模块中间件
            routes.forEach(route => {
                const method = route.method.toLowerCase() as ('get'|'post'|'put'|'delete'|'patch'|'options')
                const handler = route.handler as Handler
                const middlewares = (route.middlewares ?? []).map(m => createMiddleware(m))
                apiRouter[method](route.path, ...middlewares, handler)
            })
            this.api?.route('/', apiRouter)
        })
        options.bootstrap && options.bootstrap(api)
        return this.api
    }
    static createController<E extends Env = any, P extends string = any>(uid:string, controllers:Record<string, Return<CreateHandlersInterface<E, P>>[0]>) {
         for (const [name, controller] of Object.entries(controllers)) {
             this.appControllers[`${uid}.${name}`] = ApiModule.factory.createHandlers(controller)[0]
         }
    }
    static createRouter(uid:string, router:Router) {
        router.type = router.type ?? 'content-api'
        const symbol = UID_SYMBOL[router.type]
        const id = uid.replace(symbol, '')
        router.prefix = router.prefix ?? `/${id}`
        router.routes.forEach(route => {
            switch (typeof route.handler) {
                case 'string':
                    route.handler = this.appControllers[`${symbol}${route.handler}`]
                    break
                case 'function':
                    break
                default:
            }
            if (!route.handler) {
                throw new Error(`Handler not found for route ${route.path} in ${uid} controller`)
            }
        })
        this.appRouters.push(router)
    }
}

export default ApiModule